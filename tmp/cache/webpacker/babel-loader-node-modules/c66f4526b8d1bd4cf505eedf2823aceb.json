{"ast":null,"code":"// 이 파일은 Webpack에 의해 자동으로 컴파일됩니다. 실제 애플리케이션 로직은\n// app/javascript 디렉토리 내의 관련 구조에 배치하고, 이 파일에서는 그 코드들을 참조하여 컴파일합니다.\nrequire(\"@rails/ujs\").start();\n\nrequire(\"turbolinks\").start();\n\nrequire(\"@rails/activestorage\").start();\n\nrequire(\"channels\");\n\nimport 'semantic-ui-css/semantic.min.css';\nimport $ from 'jquery'; // jQuery를 먼저 import\n\nimport 'semantic-ui-css/semantic.min.js'; // 그 후 Semantic UI를 불러옴\n\n$(document).ready(function () {\n  // Semantic UI dropdown 초기화\n  $('.ui.dropdown').dropdown(); // CSRF 토큰을 헤더에 추가하여 fetch 요청을 보내는 코드\n\n  var token = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content'); // 예시로 카테고리를 선택하여 POST 요청 보내기\n\n  $('#category-form').submit(function (event) {\n    event.preventDefault(); // 폼 제출을 막고 AJAX로 처리\n\n    var categoryValue = $('#category-select').val(); // 선택된 카테고리 값 가져오기\n\n    fetch('/categories', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRF-Token': token // CSRF 토큰 추가\n\n      },\n      body: JSON.stringify({\n        category: categoryValue\n      }) // 선택된 카테고리 데이터 전송\n\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      return console.log('성공:', data);\n    }) // 성공 시 응답 처리\n    [\"catch\"](function (error) {\n      return console.error('오류:', error);\n    }); // 실패 시 오류 처리\n  });\n});","map":{"version":3,"sources":["/workspace/you/app/javascript/packs/application.js"],"names":["require","start","$","document","ready","dropdown","token","querySelector","getAttribute","submit","event","preventDefault","categoryValue","val","fetch","method","headers","body","JSON","stringify","category","then","response","json","data","console","log","error"],"mappings":"AAAA;AACA;AAEAA,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAtB;;AACAD,OAAO,CAAC,YAAD,CAAP,CAAsBC,KAAtB;;AACAD,OAAO,CAAC,sBAAD,CAAP,CAAgCC,KAAhC;;AACAD,OAAO,CAAC,UAAD,CAAP;;AAEA,OAAO,kCAAP;AACA,OAAOE,CAAP,MAAc,QAAd,C,CAAyB;;AACzB,OAAO,iCAAP,C,CAA2C;;AAE3CA,CAAC,CAACC,QAAD,CAAD,CAAYC,KAAZ,CAAkB,YAAW;AAC3B;AACAF,EAAAA,CAAC,CAAC,cAAD,CAAD,CAAkBG,QAAlB,GAF2B,CAI3B;;AACA,MAAMC,KAAK,GAAGH,QAAQ,CAACI,aAAT,CAAuB,yBAAvB,EAAkDC,YAAlD,CAA+D,SAA/D,CAAd,CAL2B,CAO3B;;AACAN,EAAAA,CAAC,CAAC,gBAAD,CAAD,CAAoBO,MAApB,CAA2B,UAASC,KAAT,EAAgB;AACzCA,IAAAA,KAAK,CAACC,cAAN,GADyC,CAChB;;AAEzB,QAAMC,aAAa,GAAGV,CAAC,CAAC,kBAAD,CAAD,CAAsBW,GAAtB,EAAtB,CAHyC,CAGW;;AAEpDC,IAAAA,KAAK,CAAC,aAAD,EAAgB;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,wBAAgBV,KAFT,CAEgB;;AAFhB,OAFU;AAMnBW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,QAAQ,EAAER;AAAZ,OAAf,CANa,CAMgC;;AANhC,KAAhB,CAAL,CAQCS,IARD,CAQM,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KARd,EASCF,IATD,CASM,UAAAG,IAAI;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,IAAnB,CAAJ;AAAA,KATV,EASyC;AATzC,cAUO,UAAAG,KAAK;AAAA,aAAIF,OAAO,CAACE,KAAR,CAAc,KAAd,EAAqBA,KAArB,CAAJ;AAAA,KAVZ,EALyC,CAeM;AAChD,GAhBD;AAiBD,CAzBD","sourcesContent":["// 이 파일은 Webpack에 의해 자동으로 컴파일됩니다. 실제 애플리케이션 로직은\n// app/javascript 디렉토리 내의 관련 구조에 배치하고, 이 파일에서는 그 코드들을 참조하여 컴파일합니다.\n\nrequire(\"@rails/ujs\").start()\nrequire(\"turbolinks\").start()\nrequire(\"@rails/activestorage\").start()\nrequire(\"channels\")\n\nimport 'semantic-ui-css/semantic.min.css';\nimport $ from 'jquery';  // jQuery를 먼저 import\nimport 'semantic-ui-css/semantic.min.js';  // 그 후 Semantic UI를 불러옴\n\n$(document).ready(function() {\n  // Semantic UI dropdown 초기화\n  $('.ui.dropdown').dropdown();\n\n  // CSRF 토큰을 헤더에 추가하여 fetch 요청을 보내는 코드\n  const token = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n\n  // 예시로 카테고리를 선택하여 POST 요청 보내기\n  $('#category-form').submit(function(event) {\n    event.preventDefault();  // 폼 제출을 막고 AJAX로 처리\n\n    const categoryValue = $('#category-select').val();  // 선택된 카테고리 값 가져오기\n\n    fetch('/categories', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRF-Token': token  // CSRF 토큰 추가\n      },\n      body: JSON.stringify({ category: categoryValue })  // 선택된 카테고리 데이터 전송\n    })\n    .then(response => response.json())\n    .then(data => console.log('성공:', data))  // 성공 시 응답 처리\n    .catch(error => console.error('오류:', error));  // 실패 시 오류 처리\n  });\n});\n"]},"metadata":{},"sourceType":"module"}